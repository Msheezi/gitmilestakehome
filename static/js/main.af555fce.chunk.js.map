{"version":3,"sources":["components/dragstyles.js","components/draganddrop.js","actions/rewardActions.js","components/UndoRedo.js","App.js","root.js","reducers/rewardsReducer.js","reducers/rootReducer.js","store/store.js","store/localStorage.js","index.js"],"names":["MainContainer","styled","div","RewardBox","props","color","location","Title","h2","CategoriesContainer","CategoryColumn","PlacedReward","CloseButton","SpacerDiv","rewards","name","category","bgcolor","colors","r1","r2","r3","r4","r5","DragAndDrop","ev","preventDefault","id","key","console","log","dataTransfer","setData","cat","getData","myState","this","updatedObj","find","obj","movingReward","placedReward","push","updateReward","removeReward","styledrewards","map","item","draggable","onDragStart","e","Date","now","length","reward","onClick","deletePlacedReward","className","onDragOver","onDrop","React","Component","connect","state","Object","values","present","dispatch","type","addReward","deleteReward","moveReward","UndoRedo","canUndo","canRedo","onUndo","onRedo","disabled","past","future","UndoActionCreators","undo","redo","App","Root","store","initialState","undoableRewards","undoable","newState","action","freeze","concat","filter","rootReducer","combineReducers","configureStore","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","createStore","applyMiddleware","logger","document","addEventListener","subscribe","stringify","setItem","saveState","getState","window","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.af555fce.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const MainContainer = styled.div`\n         display: grid;\n         width: 80vw;\n         grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n         grid-template-rows: auto;\n         /* grid-gap: 20px; */\n         grid-template-areas:\n           \"rewardheader . categoryheader . . . .\"\n           \".  . c1header  c2header  c3header  c4header  c5header\"\n           \". . . spacer . . .\"\n           \"r1 . r1c1 r1c2 r1c3 r1c4 r1c5\"\n           \"r2 . r2c1 r2c2 r2c3 r2c4 r2c5\"\n           \"r3 . r3c1 r3c2 r3c3 r3c4 r3c5\"\n           \"r4 . r4c1 r4c2 r4c3 r4c4 r4c5\"\n           \"r5 . r5c1 r5c2 r5c3 r5c4 r5c5\";\n       `;\n       //update your column widths and grid gaps\n       // add in the barriers between columns\n\n\nexport const RewardBox = styled.div`\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  height: 100px;\n  background-color: ${(props) => props.color};\n  text-align: center;\n  line-height: 100px;\n  margin: 20px;\n  grid-area: ${(props) => props.location};\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n  grid-area: ${(props)=> props.location};\n`;\n\nexport const CategoriesContainer = styled.div`\n   grid-column-start: 3 ;\n   grid-column-end: 7;\n\n`\n\nexport const CategoryColumn = styled.div`\n    grid-area: ${(props)=> props.location};\n    grid-row-start: 2;\n    grid-row-end: span 7;\n    text-align: center;\n    \n`\n\nexport const PlacedReward = styled.div`\n         line-height: 100px;\n         margin: 20px;\n         background-color: ${(props)=> props.color};\n         grid-area: ${(props)=> props.location};\n         text-align: center;\n         height: 100px;\n         width:100px;\n         position: relative;\n\n       `;\n\nexport const CloseButton = styled.div`\n  line-height:20px;\n  width: 20px;\n  position: absolute;\n  top: 2px;\n  right:2px;\n  cursor: pointer;\n  border-radius: 10px;\n  background-color: white;\n`\nexport  const SpacerDiv = styled.div`\ngrid-area: spacer;\nheight: 50px;\n\n`","import React from 'react'\nimport { updateReward, removeReward, movingReward} from '../actions/rewardActions'\nimport { connect } from \"react-redux\";\n\nimport {\n  MainContainer,\n  RewardBox,\n  Title,\n  CategoriesContainer,\n  CategoryColumn,\n  PlacedReward,\n  CloseButton,\n  SpacerDiv,\n} from \"./dragstyles\";\n\nconst rewards = [\n     { name: \"r1\", category: \"c1\", bgcolor: \"green\"},\n     { name: \"r2\", category: \"c2\", bgcolor: \"yellow\"},\n     { name: \"r3\", category: \"c3\", bgcolor: \"pink\"},\n     { name: \"r4\", category: \"c4\", bgcolor: \"skyblue\"},\n     { name: \"r5\", category: \"c5\", bgcolor: \"orange\"}\n]\n\nconst colors = {\n    r1: \"green\",\n    r2: \"yellow\",\n    r3: \"pink\",\n    r4: \"skyblue\",\n    r5: \"orange\"\n}\n\n class DragAndDrop extends React.Component{\n\n    onDragOver(ev) {\n        ev.preventDefault()\n    }\n\n    onDragStart(ev, id, key) {\n        console.log('dragstart:', id, 'key:', key);\n        \n        ev.dataTransfer.setData(\"id\", id)\n        ev.dataTransfer.setData(\"key\", key)\n    }\n\n    onDrop(ev, cat) {\n        \n        /*\n        1. Get the values from the on drag start\n        2. On drop:\n            if an existing reward, find the reward in props and pass to dispatch\n              passing the full reward to avoid shallow copy issues with redux-undo\n            if a new reward, create the object and pass to dispatch.\n \n        */\n\n        let id = ev.dataTransfer.getData(\"id\")\n        let key = ev.dataTransfer.getData(\"key\") \n        let myState = [...this.props.rewards]\n        \n\n        let updatedObj = myState.find(obj => obj.key === key)\n        \n        \n\n        if (updatedObj){\n          \n          this.props.movingReward(updatedObj, cat)\n\n        } else if (!updatedObj) {\n                 const placedReward = {\n                   name: id,\n                   location: `${id}${cat}`,\n                   bgcolor: colors[id],\n                   key: key,\n                 };\n                 myState.push(placedReward);\n                 this.props.updateReward(placedReward);\n               }\n      \n    }\n\n    deletePlacedReward(key){\n      this.props.removeReward(key)\n    }\n\n    render(){\n\n\n       const styledrewards =  rewards.map( item => {\n          /*\n            this function is reading the rewards array and creating the starting items from \n            which users will drag a reward to a category\n          */\n       \n        return (\n          <RewardBox\n            key={item.name}\n            color={item.bgcolor}\n            location={item.name}\n            draggable\n            onDragStart={(e) => this.onDragStart(e, item.name, Date.now())}\n          >\n            {item.name}\n          </RewardBox>\n        );\n        })\n\n        let placedReward\n          if (this.props.rewards.length > 0){\n           placedReward = this.props.rewards.map((reward) => {\n           \n            /*\n            this function is reading state for any placed rewards and creating dom nodes \n            to attach the values to\n            */\n\n           return (\n             <PlacedReward\n               location={reward.location}\n               key={reward.key}\n               color={reward.bgcolor}\n               draggable\n               onDragStart={(e) => this.onDragStart(e, reward.name, reward.key)}\n             >\n               {reward.name}\n               <CloseButton onClick={() => this.deletePlacedReward(reward.key)}>\n                 X\n               </CloseButton>\n             </PlacedReward>\n           );\n        });\n      } \n\n\n        return (\n          <MainContainer>\n            <SpacerDiv/>\n            <Title location={\"rewardheader\"}>Rewards</Title>\n            {styledrewards}\n            <CategoriesContainer>\n              <Title>Categories</Title>\n            </CategoriesContainer>\n            <CategoryColumn\n              location={\"c1header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c1\")}\n            >\n              <span className=\"category\">C1</span>\n            </CategoryColumn>\n            <CategoryColumn\n              location={\"c2header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c2\")}\n            >\n              <span className=\"category\">C2</span>\n            </CategoryColumn>\n            <CategoryColumn\n              location={\"c3header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c3\")}\n            >\n              <span className=\"category\">C3</span>\n            </CategoryColumn>\n            <CategoryColumn\n              location={\"c4header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c4\")}\n            >\n              <span className=\"category\">C4</span>\n            </CategoryColumn>\n            <CategoryColumn\n              location={\"c5header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c5\")}\n            >\n              <span className=\"category\">C5</span>\n            </CategoryColumn>\n            {placedReward}\n          </MainContainer>\n        );\n\n    }\n}\n\nconst msp = state => {\n  let rewards = Object.values(state.rewards.present)\n  return {\n    rewards: rewards\n  }\n}\n\nconst mdp = dispatch => ({\n    updateReward: (reward) => dispatch(updateReward(reward)),\n    removeReward: (key) => dispatch(removeReward(key)),\n  movingReward: (reward, cat) => dispatch(movingReward(reward, cat))\n})\n\nexport default connect(msp, mdp)(DragAndDrop)","\nexport const ADD_REWARD = \"ADD_REWARD\"\nexport const DELETE_REWARD = \"DELETE_REWARD\"\nexport const UPDATE_REWARD = \"UPDATE_REWARD\"\n\n const addReward = (reward) => ({\n    type: ADD_REWARD,\n    reward\n})\n\n const deleteReward = (key) => ({\n  type: DELETE_REWARD,\n  key,\n});\n\nconst moveReward = (reward, cat) => ({\n  type: UPDATE_REWARD,\n  reward,\n  cat\n});\n\nexport const updateReward = (reward) => addReward(reward)\nexport const removeReward = (key) => deleteReward(key)\nexport const movingReward = (reward, cat) => moveReward(reward, cat);\n","import React from \"react\";\nimport { ActionCreators as UndoActionCreators } from \"redux-undo\";\nimport { connect } from \"react-redux\";\n/* ... */\n\nlet UndoRedo = ({ canUndo, canRedo, onUndo, onRedo }) => (\n  <p>\n    <button onClick={onUndo} disabled={!canUndo}>\n      Undo\n    </button>\n    <button onClick={onRedo} disabled={!canRedo}>\n      Redo\n    </button>\n  </p>\n);\n\n\n/* ... */\n\nconst mapStateToProps = (state) => {\n  return {\n    canUndo: state.rewards.past.length > 0,\n    canRedo: state.rewards.future.length > 0,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onUndo: () => dispatch(UndoActionCreators.undo()),\n    onRedo: () => dispatch(UndoActionCreators.redo()),\n  };\n};\n\nUndoRedo = connect(mapStateToProps, mapDispatchToProps)(UndoRedo);\n\nexport default UndoRedo;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport DragAndDrop from './components/draganddrop'\nimport UndoRedo from './components/UndoRedo'\n\nfunction App() {\n  return (\n    <div>\n\n    <DragAndDrop/>\n    <UndoRedo/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport App from './App'\n\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    \n      <App />\n    \n  </Provider>\n);\n\nexport default Root;\n","import {\n    ADD_REWARD,\n    DELETE_REWARD, UPDATE_REWARD\n} from '../actions/rewardActions'\n\nimport undoable from 'redux-undo'\n\nconst initialState =  []\n\nconst RewardsReducer = (state = initialState, action) => {\n    Object.freeze(state)\n    let newState\n    switch (action.type) {\n        case ADD_REWARD:\n            newState = state.concat([action.reward])\n            // newState.push(action.reward)\n            return newState\n        case UPDATE_REWARD:\n            // newState = Object.assign({}, state)\n            const {name, bgcolor, key} = action.reward\n            newState = state.filter(obj => obj.key !== key) \n            newState.push({\n              name: name,\n              key: key,\n              location: `${name}${action.cat}`,\n              bgcolor: bgcolor\n            });\n            \n            return newState\n        case DELETE_REWARD:\n            newState = state.filter(obj => obj.key!== action.key )\n            return newState\n        default:\n            return state\n    }\n}\n\nconst undoableRewards = undoable(RewardsReducer)\n\nexport default undoableRewards","import {combineReducers} from 'redux'\nimport undoableRewards from './rewardsReducer'\n\n\nconst rootReducer = combineReducers({\n  rewards: undoableRewards,\n});\n\nexport default rootReducer","import { createStore, applyMiddleware } from \"redux\";\n\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"../reducers/rootReducer\";\nimport { loadState } from './localStorage'\n\n\n\nconst configureStore = () => {\n  const persistedState = loadState()\n  return createStore(rootReducer, persistedState, applyMiddleware(logger));\n\n}\n\n \nexport default configureStore;\n","export const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('savedState')\n        if (serializedState === null){\n            return undefined \n        }\n        return JSON.parse(serializedState)\n    } catch (err){\n        return undefined\n    }\n}\n\nexport const saveState = state => {\n    try {\n        console.log(state)\n        const serializedState = JSON.stringify(state)\n        localStorage.setItem(\"savedState\", serializedState)\n    } catch {\n        //ignore write errors\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Root from './root'\nimport configureStore from './store/store'\nimport { saveState } from \"./store/localStorage\";\n\n// import * as serviceWorker from './serviceWorker';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store = configureStore()\n  store.subscribe(() => {\n    saveState(store.getState())})\n\n    window.getState = store.getState\n  const root = document.getElementById(\"root\")\n  ReactDOM.render(<Root store={store}/>, root)\n})\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}