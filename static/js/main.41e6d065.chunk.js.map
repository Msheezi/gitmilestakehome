{"version":3,"sources":["components/dragstyles.js","components/draganddrop.js","store/localStorage.js","actions/rewardActions.js","components/UndoRedo.js","App.js","root.js","reducers/rewardsReducer.js","reducers/rootReducer.js","store/store.js","index.js"],"names":["MainContainer","styled","div","RewardBox","props","color","location","Title","h2","CategoriesContainer","CategoryColumn","PlacedReward","CloseButton","SpacerDiv","VertDiv","rewards","name","category","bgcolor","colors","r1","r2","r3","r4","r5","DragAndDrop","ev","preventDefault","id","key","dataTransfer","setData","cat","getData","updatedObj","this","find","obj","movingReward","placedReward","updateReward","removeReward","map","data-testid","className","onDragOver","e","onDrop","item","draggable","onDragStart","Date","now","length","reward","onClick","deletePlacedReward","localStorage","clear","clearState","restoredState","serializedState","getItem","JSON","parse","present","err","loadState","restoreFromStorage","renderPlacedRewards","styledrewards","renderRewards","drops","renderDropZones","style","borderBottom","gridArea","paddingTop","resetState","loadFromStorage","state","stringify","setItem","saveState","React","Component","connect","rewardState","keys","Object","dispatch","type","placeNewReward","deleteReward","moveReward","restoreState","UndoRedo","canUndo","canRedo","onUndo","onRedo","disabled","past","future","UndoActionCreators","undo","redo","App","Root","store","initialState","undoableRewards","undoable","newState","action","freeze","assign","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","logger","document","addEventListener","window","getState","root","getElementById","ReactDOM","render"],"mappings":"40FAEO,IAAMA,EAAgBC,IAAOC,IAAV,KAuBbC,EAAYF,IAAOC,IAAV,KAKA,SAACE,GAAD,OAAWA,EAAMC,SAIxB,SAACD,GAAD,OAAWA,EAAME,YAKnBC,EAAQN,IAAOO,GAAV,KAEH,SAACJ,GAAD,OAAUA,EAAME,YAOlBG,EAAsBR,IAAOC,IAAV,KASnBQ,EAAiBT,IAAOC,IAAV,KACV,SAACE,GAAD,OAAUA,EAAME,YAOpBK,EAAeV,IAAOC,IAAV,KAGI,SAACE,GAAD,OAAUA,EAAMC,SACvB,SAACD,GAAD,OAAUA,EAAME,YAUzBM,EAAcX,IAAOC,IAAV,KAWVW,EAAYZ,IAAOC,IAAV,KAMVY,EAAUb,IAAOC,IAAV,KCxEda,EAAU,CACd,CAAEC,KAAM,KAAMC,SAAU,KAAMC,QAAS,WACvC,CAAEF,KAAM,KAAMC,SAAU,KAAMC,QAAS,WACvC,CAAEF,KAAM,KAAMC,SAAU,KAAMC,QAAS,WACvC,CAAEF,KAAM,KAAMC,SAAU,KAAMC,QAAS,WACvC,CAAEF,KAAM,KAAMC,SAAU,KAAMC,QAAS,YAGnCC,EAAS,CACbC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,WAGAC,E,yKACOC,GACTA,EAAGC,mB,kCAGOD,EAAIE,EAAIC,GAGlBH,EAAGI,aAAaC,QAAQ,KAAMH,GAC9BF,EAAGI,aAAaC,QAAQ,MAAOF,K,6BAG1BH,EAAIM,GAUT,IAAIJ,EAAKF,EAAGI,aAAaG,QAAQ,MAC7BJ,EAAMH,EAAGI,aAAaG,QAAQ,OAE9B3B,EAAQ,UAAMsB,GAAN,OAAWI,GACnBE,EAAaC,KAAK/B,MAAMW,QAAQqB,MAAK,SAACC,GACxC,OAAOA,EAAIR,MAAQA,KAWrB,GAAIK,GAAcA,EAAW5B,WAAaA,EAExC6B,KAAK/B,MAAMkC,aAAaJ,EAAYF,QAC/B,IAAKE,EAAY,CACtB,IAAMK,EAAe,CACnBvB,KAAMY,EACNtB,SAAUA,EACVY,QAASC,EAAOS,GAChBC,IAAKA,GAGPM,KAAK/B,MAAMoC,aAAaD,M,yCAITV,GACjBM,KAAK/B,MAAMqC,aAAaZ,K,wCAGP,IAAD,OAgBhB,MAfiB,CAAC,KAAM,KAAM,KAAM,KAAM,MACPa,KAAI,SAACV,GACtC,OACE,kBAACtB,EAAD,CACEiC,cAAA,UAAgBX,EAAhB,YACAH,IAAKG,EACL1B,SAAQ,UAAK0B,EAAL,UACRY,UAAU,WACVC,WAAY,SAACC,GAAD,OAAO,EAAKD,WAAWC,IACnCC,OAAQ,SAACD,GAAD,OAAO,EAAKC,OAAOD,EAAZ,UAAkBd,MAEjC,0BAAMY,UAAU,YAAYZ,S,sCAOnB,IAAD,OAoBd,OAnBsBjB,EAAQ2B,KAAI,SAACM,GAMjC,OACE,kBAAC7C,EAAD,CACEwC,cAAA,iBAAuBK,EAAKhC,MAC5Ba,IAAKmB,EAAKhC,KACVX,MAAO2C,EAAK9B,QACZZ,SAAU0C,EAAKhC,KACfiC,WAAS,EACTC,YAAa,SAACJ,GAAD,OAAO,EAAKI,YAAYJ,EAAGE,EAAKhC,KAAMmC,KAAKC,SAEvDJ,EAAKhC,W,4CAOS,IACjBuB,EADgB,OA0BpB,OAxBIJ,KAAK/B,MAAMW,QAAQsC,OAAS,IAC9Bd,EAAeJ,KAAK/B,MAAMW,QAAQ2B,KAAI,SAACY,GAMrC,OACE,kBAAC3C,EAAD,CACEgC,cAAA,iBAAuBW,EAAOhD,UAC9BA,SAAUgD,EAAOhD,SACjBuB,IAAKyB,EAAOzB,IACZxB,MAAOiD,EAAOpC,QACd+B,WAAS,EACTC,YAAa,SAACJ,GAAD,OAAO,EAAKI,YAAYJ,EAAGQ,EAAOtC,KAAMsC,EAAOzB,OAE3DyB,EAAOtC,KACR,kBAACJ,EAAD,CAAa2C,QAAS,kBAAM,EAAKC,mBAAmBF,EAAOzB,OAA3D,UAODU,I,mCAIPkB,aAAaC,QACbvB,KAAK/B,MAAMuD,e,wCAIX,IAAIC,EC9KiB,WACvB,IACE,IAAMC,EAAkBJ,aAAaK,QAAQ,cAC7C,GAAwB,OAApBD,EACF,OAGF,OADmBE,KAAKC,MAAMH,GACV9C,QAAQkD,QAC5B,MAAOC,GACP,QDqKoBC,GACpBhC,KAAK/B,MAAMgE,mBAAmBR,K,+BAGtB,IAAD,OACHrB,EAAeJ,KAAKkC,sBACpBC,EAAgBnC,KAAKoC,gBACrBC,EAAQrC,KAAKsC,kBACjB,OACE,kBAACzE,EAAD,KACE,kBAACa,EAAD,MACA,kBAACN,EAAD,CACEmE,MAAO,CAAEC,aAAc,mBACvBrE,SAAU,gBAFZ,WAMCgE,EACD,kBAAC7D,EAAD,KACE,kBAACF,EAAD,oBAGDiE,EACAjC,EACD,kBAACzB,EAAD,MACA,yBACE4D,MAAO,CACLE,SAAU,cACVC,WAAY,SAGd,4BAAQtB,QAAS,kBAAM,EAAKuB,eAA5B,uBACA,4BAAQvB,QAAS,kBAAM,EAAKwB,oBAA5B,2BAGA,4BAAQxB,QAAS,kBCpMF,SAACyB,GACxB,IACE,IAAMnB,EAAkBE,KAAKkB,UAAUD,GACvCvB,aAAayB,QAAQ,aAAcrB,GACnC,WDgM6BsB,CAAU,EAAK/E,MAAM4E,SAA5C,+B,GAzKgBI,IAAMC,WAqMjBC,eAnBH,SAACN,GACX,IAAMO,EAAcP,EAAMjE,QAAQkD,QAC5BuB,EAAOC,OAAOD,KAAKD,GAEzB,MAAO,CACLxE,QAFYyE,EAAK9C,KAAI,SAACb,GAAD,OAAS0D,EAAY1D,MAG1C2D,KAAMA,EACNR,MAAOA,MAIC,SAACU,GAAD,MAAe,CACzBlD,aAAc,SAACc,GAAD,OAAYoC,EEvMA,SAACpC,GAAD,OA1BL,SAACA,GAAD,MAAa,CAClCqC,KANwB,aAOxBrC,UAwBsCsC,CAAetC,GFuMlBd,CAAac,KAChDb,aAAc,SAACZ,GAAD,OAAS6D,EEvMG,SAAC7D,GAAD,OAtBP,SAACA,GAAD,MAAU,CAC7B8D,KAV2B,gBAW3B9D,OAoBmCgE,CAAahE,GFuMhBY,CAAaZ,KAC7CS,aAAc,SAACgB,EAAQtB,GAAT,OAAiB0D,EEvML,SAACpC,EAAQtB,GAAT,OAlBT,SAACsB,EAAQtB,GAAT,MAAkB,CACnC2D,KAd2B,gBAe3BrC,SACAtB,OAe2C8D,CAAWxC,EAAQtB,GFuMtBM,CAAagB,EAAQtB,KAC7D2B,WAAY,kBAAM+B,EEpNM,CACxBC,KAAM,iBFoNNvB,mBAAoB,SAACY,GAAD,OAAWU,EExMC,SAACV,GAAD,OATb,SAACA,GAAD,MAAY,CAC/BW,KAAM,UACNX,SAO2Ce,CAAaf,GFwMhBZ,CAAmBY,QAG9CM,CAAkB7D,G,gBGxO7BuE,EAAW,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAASC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,OAA7B,OACb,2BACE,4BAAQT,KAAK,OAAOpC,QAAS4C,EAAQE,UAAWJ,GAAhD,QAGA,4BAAQN,KAAK,OAAOpC,QAAS6C,EAAQC,UAAWH,GAAhD,UAyBWF,EAFfA,EAAWV,aAda,SAACN,GACvB,MAAO,CACLiB,QAASjB,EAAMjE,QAAQuF,KAAKjD,OAAS,EACrC6C,QAASlB,EAAMjE,QAAQwF,OAAOlD,OAAS,MAIhB,SAACqC,GAC1B,MAAO,CACLS,OAAQ,kBAAMT,EAASc,iBAAmBC,SAC1CL,OAAQ,kBAAMV,EAASc,iBAAmBE,YAInCpB,CAA6CU,GCjBzCW,MAVf,WACE,OACE,6BAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGWC,EARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAAC,IAAD,CAAUA,MAAOA,GAEb,kBAAC,EAAD,Q,uCCDAC,EAAe,GAwCNC,EAFSC,KApCD,WAAmC,IAEpDC,EAFkBjC,EAAiC,uDAAzB8B,EAAcI,EAAW,uCAGvD,OAFAzB,OAAO0B,OAAOnC,GAENkC,EAAOvB,MACb,IJdsB,aIkBpB,OAHAsB,EAAWxB,OAAO2B,OAAO,GAAIpC,IAEpBkC,EAAO5D,OAAOzB,KAAOqF,EAAO5D,OAC9B2D,EACT,IJjByB,gBIiBzB,IACUpF,EAAQqF,EAAO5D,OAAfzB,IAKR,OAHAoF,EAAQ,uCAAQjC,GAAUA,EAAMnD,KAAxB,kBAA8BA,EAA9B,eAAyCqF,EAAO5D,WAC/CzB,GAAKvB,SAAd,UAA4B4G,EAAO5D,OAAOtC,MAA1C,OAAiDkG,EAAOlF,KAEjDiF,EACT,IJzByB,gBI6BvB,cAHAA,EAAWxB,OAAO2B,OAAO,GAAIpC,IACbkC,EAAOrF,KAEhBoF,EACT,IAAK,UAGH,OAFAA,EAAWxB,OAAO2B,OAAO,GAAIF,EAAOlC,OAGpC,IAAK,cAED,OADAiC,EAAWxB,OAAO2B,OAAO,IAK/B,QACE,OAAOpC,MClCEqC,EAJKC,YAAgB,CAClCvG,QAASgG,ICQIQ,EANQ,WAAwB,IAAvBT,EAAsB,uDAAP,GAGrC,OAAOU,YAAYH,EAAaP,EAAcW,YAAgBC,OCAhEC,SAASC,iBAAiB,oBAAoB,WAC5C,IAAIf,EAAQU,IAKZM,OAAOC,SAAWjB,EAAMiB,SACxB,IAAMC,EAAOJ,SAASK,eAAe,QACrCC,IAASC,OAAO,kBAAC,EAAD,CAAMrB,MAAOA,IAAWkB,Q","file":"static/js/main.41e6d065.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const MainContainer = styled.div`\n         display: grid;\n         width: 80vw;\n         grid-template-columns: minmax(150px,1fr) 0.5fr minmax(150px,1fr) minmax(150px,1fr) minmax(150px,1fr) minmax(150px,1fr) minmax(150px,1fr);\n         /* 150px 50px 150px 150px 150px 150px 150px  */\n          \n         grid-template-rows: auto;\n         /* grid-gap: 20px; */\n         grid-template-areas:\n           \"rewardheader vertspacer categoryheader . . . .\"\n           \".  . c1header  c2header  c3header  c4header  c5header\"\n           \". . . spacer . . .\"\n           \"r1 . r1c1 r1c2 r1c3 r1c4 r1c5\"\n           \"r2 . r2c1 r2c2 r2c3 r2c4 r2c5\"\n           \"r3 . r3c1 r3c2 r3c3 r3c4 r3c5\"\n           \"r4 . r4c1 r4c2 r4c3 r4c4 r4c5\"\n           \"r5 . r5c1 r5c2 r5c3 r5c4 r5c5\"\n           \". . . resetbutton . . .\";\n       `;\n       //update your column widths and grid gaps\n       // add in the barriers between columns\n\n\nexport const RewardBox = styled.div`\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  height: 100px;\n  background-color: ${(props) => props.color};\n  text-align: center;\n  line-height: 100px;\n  margin: 20px auto;\n  grid-area: ${(props) => props.location};\n\n\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n  grid-area: ${(props)=> props.location};\n  /* border-bottom: 1px solid black; */\n  margin: 20px auto;\n  /* text-decoration: underline; */\n  \n`;\n\nexport const CategoriesContainer = styled.div`\n   grid-column-start: 3 ;\n   grid-column-end: 8;\n   border-bottom: 1px solid black;\n   margin-bottom: 10px;\n   \n\n`\n\nexport const CategoryColumn = styled.div`\n    grid-area: ${(props)=> props.location};\n    grid-row-start: 2;\n    grid-row-end: span 7;\n    text-align: center;\n    border-right: 1px solid black;\n`\n\nexport const PlacedReward = styled.div`\n         line-height: 100px;\n         margin: 20px auto;\n         background-color: ${(props)=> props.color};\n         grid-area: ${(props)=> props.location};\n         text-align: center;\n         height: 100px;\n         width:100px;\n         position: relative;\n         \n\n\n       `;\n\nexport const CloseButton = styled.div`\n  \n  line-height:20px;\n  width: 20px;\n  position: absolute;\n  top: 2px;\n  right:2px;\n  cursor: pointer;\n  border-radius: 10px;\n  background-color: white;\n`\nexport  const SpacerDiv = styled.div`\ngrid-area: spacer;\nheight: 50px;\n\n`\n\nexport const VertDiv = styled.div`\n  grid-area: vertspacer;\n  grid-row-start: 1;\n  grid-row-end: span 8;\n  border-right: 1px solid black;\n  margin: 10px;\n`\n","import React from \"react\";\nimport {\n  updateReward,\n  removeReward,\n  movingReward,\n  clearState,\n  restoreFromStorage,\n} from \"../actions/rewardActions\";\nimport { connect } from \"react-redux\";\n\nimport {\n  MainContainer,\n  RewardBox,\n  Title,\n  CategoriesContainer,\n  CategoryColumn,\n  PlacedReward,\n  CloseButton,\n  SpacerDiv,\n  VertDiv,\n} from \"./dragstyles\";\n\nimport { saveState, loadState } from \"../store/localStorage\";\n\nconst rewards = [\n  { name: \"r1\", category: \"c1\", bgcolor: \"#f5e6e8\" },\n  { name: \"r2\", category: \"c2\", bgcolor: \"#a3f7b5\" },\n  { name: \"r3\", category: \"c3\", bgcolor: \"#40c9a2\" },\n  { name: \"r4\", category: \"c4\", bgcolor: \"#2f9c95\" },\n  { name: \"r5\", category: \"c5\", bgcolor: \"#bee3ea\" },\n];\n\nconst colors = {\n  r1: \"#f5e6e8\",\n  r2: \"#a3f7b5\",\n  r3: \"#40c9a2\",\n  r4: \"#2f9c95\",\n  r5: \"#bee3ea\",\n};\n\nclass DragAndDrop extends React.Component {\n  onDragOver(ev) {\n    ev.preventDefault();\n  }\n\n  onDragStart(ev, id, key) {\n    // console.log('dragstart:', id, 'key:', key);\n\n    ev.dataTransfer.setData(\"id\", id);\n    ev.dataTransfer.setData(\"key\", key);\n  }\n\n  onDrop(ev, cat) {\n    /*\n        1. Get the values from the on drag start\n        2. On drop:\n            if an existing reward, find the reward in props and pass to dispatch\n              passing the full reward to avoid shallow copy issues with redux-undo\n            if a new reward, create the object and pass to dispatch.\n \n        */\n\n    let id = ev.dataTransfer.getData(\"id\");\n    let key = ev.dataTransfer.getData(\"key\");\n\n    let location = `${id}${cat}`;\n    let updatedObj = this.props.rewards.find((obj) => {\n      return obj.key === key;\n    });\n    // console.log(\"key: \", key, \"location: \", location, \"UpdatedOBJ: \", updatedObj)\n\n    /**\n     * bug: while placing the same square in the same swin lane doesn't\n     * duplicate, it does fire a redux action\n     * revise the conditional so that if it matches key and location\n     * do nothing else if key matches, do update else create obj\n     */\n\n    if (updatedObj && updatedObj.location !== location) {\n      // updatedObj.location = location\n      this.props.movingReward(updatedObj, cat);\n    } else if (!updatedObj) {\n      const placedReward = {\n        name: id,\n        location: location,\n        bgcolor: colors[id],\n        key: key,\n      };\n\n      this.props.updateReward(placedReward);\n    }\n  }\n\n  deletePlacedReward(key) {\n    this.props.removeReward(key);\n  }\n\n  renderDropZones() {\n    let categories = [\"c1\", \"c2\", \"c3\", \"c4\", \"c5\"];\n    let renderedDropZones = categories.map((cat) => {\n      return (\n        <CategoryColumn\n          data-testid={`${cat}Dropzone`}\n          key={cat}\n          location={`${cat}header`}\n          className=\"rewards1\"\n          onDragOver={(e) => this.onDragOver(e)}\n          onDrop={(e) => this.onDrop(e, `${cat}`)}\n        >\n          <span className=\"category\">{cat}</span>\n        </CategoryColumn>\n      );\n    });\n    return renderedDropZones;\n  }\n\n  renderRewards() {\n    const styledrewards = rewards.map((item) => {\n      /*\n          this function is reading the rewards array and creating the starting items from \n          which users will drag a reward to a category\n        */\n\n      return (\n        <RewardBox\n          data-testid={`rewards${item.name}`}\n          key={item.name}\n          color={item.bgcolor}\n          location={item.name}\n          draggable\n          onDragStart={(e) => this.onDragStart(e, item.name, Date.now())}\n        >\n          {item.name}\n        </RewardBox>\n      );\n    });\n    return styledrewards;\n  }\n\n  renderPlacedRewards() {\n    let placedReward;\n    if (this.props.rewards.length > 0) {\n      placedReward = this.props.rewards.map((reward) => {\n        /*\n          this function is reading state for any placed rewards and creating dom nodes \n          to attach the values to\n          */\n\n        return (\n          <PlacedReward\n            data-testid={`reward ${reward.location}`}\n            location={reward.location}\n            key={reward.key}\n            color={reward.bgcolor}\n            draggable\n            onDragStart={(e) => this.onDragStart(e, reward.name, reward.key)}\n          >\n            {reward.name}\n            <CloseButton onClick={() => this.deletePlacedReward(reward.key)}>\n              X\n            </CloseButton>\n          </PlacedReward>\n        );\n      });\n    }\n    return placedReward;\n  }\n\n  resetState() {\n    localStorage.clear();\n    this.props.clearState();\n  }\n\n  loadFromStorage() {\n    let restoredState = loadState();\n    this.props.restoreFromStorage(restoredState);\n  }\n\n  render() {\n    let placedReward = this.renderPlacedRewards();\n    let styledrewards = this.renderRewards();\n    let drops = this.renderDropZones();\n    return (\n      <MainContainer>\n        <SpacerDiv />\n        <Title\n          style={{ borderBottom: \"1px solid black\" }}\n          location={\"rewardheader\"}\n        >\n          Rewards\n        </Title>\n        {styledrewards}\n        <CategoriesContainer>\n          <Title>Categories</Title>\n        </CategoriesContainer>\n\n        {drops}\n        {placedReward}\n        <VertDiv />\n        <div\n          style={{\n            gridArea: \"resetbutton\",\n            paddingTop: \"50px\",\n          }}\n        >\n          <button onClick={() => this.resetState()}>Reset Local Storage</button>\n          <button onClick={() => this.loadFromStorage()}>\n            Load From Local Storage\n          </button>\n          <button onClick={() => saveState(this.props.state)}>\n            Save State to Storage\n          </button>\n        </div>\n      </MainContainer>\n    );\n  }\n}\n\nconst msp = (state) => {\n  const rewardState = state.rewards.present;\n  const keys = Object.keys(rewardState);\n  let rewards = keys.map((key) => rewardState[key]);\n  return {\n    rewards: rewards,\n    keys: keys,\n    state: state,\n  };\n};\n\nconst mdp = (dispatch) => ({\n  updateReward: (reward) => dispatch(updateReward(reward)),\n  removeReward: (key) => dispatch(removeReward(key)),\n  movingReward: (reward, cat) => dispatch(movingReward(reward, cat)),\n  clearState: () => dispatch(clearState()),\n  restoreFromStorage: (state) => dispatch(restoreFromStorage(state)),\n});\n\nexport default connect(msp, mdp)(DragAndDrop);\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"savedState\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    let rewardsState = JSON.parse(serializedState);\n    return rewardsState.rewards.present;\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"savedState\", serializedState);\n  } catch {\n    //ignore write errors\n  }\n};\n","export const ADD_REWARD = \"ADD_REWARD\";\nexport const DELETE_REWARD = \"DELETE_REWARD\";\nexport const UPDATE_REWARD = \"UPDATE_REWARD\";\nexport const SAVE_STATE = \"SAVE_STATE\";\n\nconst placeNewReward = (reward) => ({\n  type: ADD_REWARD,\n  reward,\n});\n\nconst deleteReward = (key) => ({\n  type: DELETE_REWARD,\n  key,\n});\n\nconst moveReward = (reward, cat) => ({\n  type: UPDATE_REWARD,\n  reward,\n  cat,\n});\n\nconst resetState = () => ({\n  type: \"RESET_STATE\",\n});\n\nconst restoreState = (state) => ({\n  type: \"RESTORE\",\n  state,\n});\n\nexport const clearState = () => resetState();\nexport const updateReward = (reward) => placeNewReward(reward);\nexport const removeReward = (key) => deleteReward(key);\nexport const movingReward = (reward, cat) => moveReward(reward, cat);\nexport const restoreFromStorage = (state) => restoreState(state);\n\n// export const saveToLocal = (state) => saveState(state);\n","import React from \"react\";\nimport { ActionCreators as UndoActionCreators } from \"redux-undo\";\nimport { connect } from \"react-redux\";\n/* ... */\n\nlet UndoRedo = ({ canUndo, canRedo, onUndo, onRedo }) => (\n  <p>\n    <button type=\"undo\" onClick={onUndo} disabled={!canUndo}>\n      Undo\n    </button>\n    <button type=\"redo\" onClick={onRedo} disabled={!canRedo}>\n      Redo\n    </button>\n  </p>\n);\n\n\n/* ... */\n\nconst mapStateToProps = (state) => {\n  return {\n    canUndo: state.rewards.past.length > 0,\n    canRedo: state.rewards.future.length > 0,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onUndo: () => dispatch(UndoActionCreators.undo()),\n    onRedo: () => dispatch(UndoActionCreators.redo()),\n  };\n};\n\nUndoRedo = connect(mapStateToProps, mapDispatchToProps)(UndoRedo);\n\nexport default UndoRedo;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport DragAndDrop from './components/draganddrop'\nimport UndoRedo from './components/UndoRedo'\n\nfunction App() {\n  return (\n    <div>\n\n    <DragAndDrop/>\n    <UndoRedo/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport App from './App'\n\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    \n      <App />\n    \n  </Provider>\n);\n\nexport default Root;\n","import {\n  ADD_REWARD,\n  DELETE_REWARD,\n  UPDATE_REWARD,\n} from \"../actions/rewardActions\";\n\nimport undoable from \"redux-undo\";\n\nconst initialState = {};\n\nconst RewardsReducer = (state = initialState, action) => {\n  Object.freeze(state);\n  let newState;\n  switch (action.type) {\n    case ADD_REWARD:\n      newState = Object.assign({}, state);\n\n      newState[action.reward.key] = action.reward;\n      return newState;\n    case UPDATE_REWARD:\n      const { key } = action.reward;\n\n      newState = { ...state, ...state.key, [key]: { ...action.reward } };\n      newState[key].location = `${action.reward.name}${action.cat}`;\n\n      return newState;\n    case DELETE_REWARD:\n      newState = Object.assign({}, state);\n      delete newState[action.key];\n\n      return newState;\n    case \"RESTORE\":\n      newState = Object.assign({}, action.state);\n      //   console.log(action.state.rewards);\n      return newState;\n      case \"RESET_STATE\":\n          newState = Object.assign({})\n          return newState\n    // case \"SAVE_STATE\":\n    //   return;\n    // // return value for this.\n    default:\n      return state;\n  }\n};\n\nconst undoableRewards = undoable(RewardsReducer);\n\nexport default undoableRewards;\n","import {combineReducers} from 'redux'\nimport undoableRewards from './rewardsReducer'\n\n\nconst rootReducer = combineReducers({\n  rewards: undoableRewards,\n});\n\nexport default rootReducer","import { createStore, applyMiddleware } from \"redux\";\n\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"../reducers/rootReducer\";\nimport { loadState } from \"./localStorage\";\n\nconst configureStore = (initialState = {}) => {\n  // const persistedState = loadState()\n  // return createStore(rootReducer, persistedState, applyMiddleware(logger));\n  return createStore(rootReducer, initialState, applyMiddleware(logger));\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Root from \"./root\";\nimport configureStore from \"./store/store\";\nimport { saveState } from \"./store/localStorage\";\n\n// import * as serviceWorker from './serviceWorker';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store = configureStore();\n  // store.subscribe(() => {\n  //   saveState(store.getState());\n  // });\n\n  window.getState = store.getState;\n  const root = document.getElementById(\"root\");\n  ReactDOM.render(<Root store={store} />, root);\n});\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}