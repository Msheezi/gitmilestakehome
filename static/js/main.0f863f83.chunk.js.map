{"version":3,"sources":["dragstyles.js","draganddrop.js","App.js","index.js"],"names":["MainContainer","styled","div","RewardBox","props","color","location","Title","h2","CategoriesContainer","CategoryColumn","PlacedReward","rewards","name","category","bgcolor","colors","r1","r2","r3","r4","r5","DragAndDrop","state","stateRewards","localStorage","getItem","stuff","this","setState","JSON","parse","length","clear","setItem","stringify","ev","preventDefault","id","key","console","log","dataTransfer","setData","cat","getData","myState","updated","forEach","obj","saveToStorage","placedReward","push","filter","rewardObj","styledrewards","map","item","draggable","onDragStart","e","Date","now","reward","onClick","deletePlacedReward","className","onDragOver","onDrop","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f863f83.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const MainContainer = styled.div`\n         display: grid;\n         width: 80vw;\n         grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n         grid-template-rows: auto;\n         /* grid-gap: 20px; */\n         grid-template-areas:\n           \"rewardheader . categoryheader . . . .\"\n           \".  . c1header  c2header  c3header  c4header  c5header\"\n           \"r1 . r1c1 r1c2 r1c3 r1c4 r1c5\"\n           \"r2 . r2c1 r2c2 r2c3 r2c4 r2c5\"\n           \"r3 . r3c1 r3c2 r3c3 r3c4 r3c5\"\n           \"r4 . r4c1 r4c2 r4c3 r4c4 r4c5\"\n           \"r5 . r5c1 r5c2 r5c3 r5c4 r5c5\";\n       `;\n       //update your column widths and grid gaps\n       // add in the barriers between columns\n\n\nexport const RewardBox = styled.div`\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100px;\n  height: 100px;\n  background-color: ${(props) => props.color};\n  text-align: center;\n  line-height: 100px;\n  margin: 20px;\n  grid-area: ${(props) => props.location};\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n  grid-area: ${(props)=> props.location};\n`;\n\nexport const CategoriesContainer = styled.div`\n   grid-column-start: 3 ;\n   grid-column-end: 7;\n\n`\n\nexport const CategoryColumn = styled.div`\n    grid-area: ${(props)=> props.location};\n    grid-row-start: 2;\n    grid-row-end: span 6;\n    text-align: center;\n    \n`\n\nexport const PlacedReward = styled.div`\n         line-height: 100px;\n         margin: 20px;\n         background-color: ${(props)=> props.color};\n         grid-area: ${(props)=> props.location};\n         text-align: center;\n         height: 100px;\n         width:100px;\n       `;","import React from 'react'\n\nimport {\n  MainContainer,\n \n  RewardBox,\n  Title,\n  CategoriesContainer,\n  CategoryColumn,\n  PlacedReward,\n} from \"./dragstyles\";\n\n// const initialState = [{ name: \"r2\", location: \"r2c3\", bgcolor: \"yellow\", key:\"1\" }] ;\n\n// consider initializing state as an object with the key value being the key to the data\n// that way on the deletes, you can reference the object key and delete\n// may need to change eyour render methods to accomodate that.\n// objects get a key when they are added to the placed grid\n\nconst rewards = [\n     { name: \"r1\", category: \"c1\", bgcolor: \"green\"},\n     { name: \"r2\", category: \"c2\", bgcolor: \"yellow\"},\n     { name: \"r3\", category: \"c3\", bgcolor: \"pink\"},\n     { name: \"r4\", category: \"c4\", bgcolor: \"skyblue\"},\n     { name: \"r5\", category: \"c5\", bgcolor: \"orange\"}\n\n\n]\n\nconst colors = {\n    r1: \"green\",\n    r2: \"yellow\",\n    r3: \"pink\",\n    r4: \"skyblue\",\n    r5: \"orange\"\n}\n\n// r1: { name: \"r1\", category: \"c1\", bgcolor: \"green\" },\n// r2: { name: \"r2\", category: \"c2\", bgcolor: \"yellow\" },\n// r3: { name: \"r3\", category: \"c3\", bgcolor: \"pink\" },\n// r4: { name: \"r4\", category: \"c4\", bgcolor: \"skyblue\" },\n// r5: { name: \"r5\", category: \"c5\", bgcolor: \"orange\" }\n\nexport default class DragAndDrop extends React.Component{\n\n    state= { stateRewards: []\n        \n        // items: [\n        //     { name: \"r1\", category: \"c1\", bgcolor: \"green\" },\n        //      { name: \"r2\", category: \"c2\", bgcolor: \"yellow\" },\n        //      { name: \"r3\", category: \"c3\", bgcolor: \"pink\" },\n        //      { name: \"r4\", category: \"c4\", bgcolor: \"skyblue\" },\n        //      { name: \"r5\", category: \"c5\", bgcolor: \"orange\" }\n        // ]\n\n    }\n\n    // component did mount to retrieve from local storage\n    //component will unmount to save state to local storage\n\n    componentDidMount(){\n      if (localStorage.getItem(\"savedState\")){\n      let stuff = localStorage.getItem(\"savedState\");\n      this.setState({ stateRewards: JSON.parse(stuff) })}\n    }\n    \n    componentWillUnmount(){\n      if (this.state.stateRewards.length === 0){\n        \n        localStorage.clear()\n      } else  {\n        let stuff = localStorage.setItem(\"savedState\", JSON.stringify(this.state.stateRewards))\n        localStorage.setItem(\"savedState\", stuff)\n      }\n    }\n\n    saveToStorage(){\n      /*\n        Save to storage only occurs if the current local state has values, otherwise it remains clear\n        Thought is there is no need to run the function if there are no values to place in storage\n      */\n      if(this.state.stateRewards.length > 0){\n        localStorage.clear()\n        localStorage.setItem(\n          \"savedState\",\n          JSON.stringify(this.state.stateRewards)\n          );\n        }\n    }\n\n    onDragOver(ev) {\n        ev.preventDefault()\n    }\n\n    onDragStart(ev, id, key) {\n        console.log('dragstart:', id, 'key:', key);\n        \n        ev.dataTransfer.setData(\"id\", id)\n        ev.dataTransfer.setData(\"key\", key)\n    }\n\n    onDrop(ev, cat) {\n        \n        /*\n        1. Get the values from the on drag start\n        2. set my updated flag - using this to control whether I am changing a \n        location on an existing object in state or creating a new object in state\n        3a. if I am changing an existing value, update state with the copied values\n        3b. If object is not found, create a new object and update state with the new object\n        */\n\n        let id = ev.dataTransfer.getData(\"id\")\n        let key = ev.dataTransfer.getData(\"key\") \n        let myState = this.state.stateRewards\n        \n        let updated = false\n        myState.forEach( obj => {\n          if (obj.key === key){\n            obj.location = `${id}${cat}`\n            updated = true\n          }\n        })\n\n        if (updated){\n          this.setState({stateRewards : myState}, this.saveToStorage())\n        } else if (!updated) {\n          const placedReward = { name: id, location: `${id}${cat}`, bgcolor: colors[id], key: key }\n          myState.push(placedReward)\n          this.setState({ stateRewards: myState }, this.saveToStorage());\n        }\n        \n\n        \n    }\n\n    deletePlacedReward(key){\n        /*\n          When function executes, clear the local storage, set state and update storage with the current completed state\n          saveToStorage added as callback to avoid race condition\n        */ \n\n        localStorage.clear()\n          let rewards = this.state.stateRewards.filter(rewardObj => rewardObj.key !== key)\n          this.setState({stateRewards: rewards}, this.saveToStorage)\n\n    }\n\n    render(){\n\n\n       const styledrewards =  rewards.map( item => {\n          /*\n            this function is reading the rewards array and creating the starting items from \n            which users will drag a reward to a category\n          */\n       \n        return (\n          <RewardBox\n            key={item.name}\n            color={item.bgcolor}\n            location={item.name}\n            draggable\n            onDragStart={(e) => this.onDragStart(e, item.name, Date.now())}\n          >\n            {item.name}\n          </RewardBox>\n        );\n        })\n\n        let placedReward\n        if (this.state.stateRewards.length > 0 ){\n\n           placedReward = this.state.stateRewards.map((reward) => {\n            /*\n            this function is reading state for any placed rewards and creating dom nodes to attached the values to\n            */\n           return (\n             <PlacedReward location={reward.location}\n             key={reward.key}\n             color={reward.bgcolor}\n             draggable\n             onDragStart={e=> this.onDragStart(e,reward.name, reward.key)}\n             \n             \n             >\n              {reward.name} \n              <div onClick={() => this.deletePlacedReward(reward.key)}>X</div>\n            </PlacedReward>\n          );\n        });\n      } \n\n\n        return (\n          <MainContainer>\n            <Title location={\"rewardheader\"}>Rewards</Title>\n            {styledrewards}\n\n            <CategoriesContainer>\n              <Title>Categories</Title>\n            </CategoriesContainer>\n\n            <CategoryColumn\n              location={\"c1header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c1\")}\n            >\n              \n              <span className=\"category\">C1</span>\n            </CategoryColumn>\n\n            <CategoryColumn\n              location={\"c2header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c2\")}\n            >\n              <span className=\"category\">C2</span>\n            </CategoryColumn>\n\n            <CategoryColumn\n              location={\"c3header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c3\")}\n            >\n              <span className=\"category\">C3</span>\n            </CategoryColumn>\n\n            <CategoryColumn\n              location={\"c4header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c4\")}\n            >\n              <span className=\"category\">C4</span>\n            </CategoryColumn>\n\n            <CategoryColumn\n              location={\"c5header\"}\n              className=\"rewards1\"\n              onDragOver={(e) => this.onDragOver(e)}\n              onDrop={(e) => this.onDrop(e, \"c5\")}\n            >\n              <span className=\"category\">C5</span>\n            </CategoryColumn>\n            \n            \n            {placedReward}\n          </MainContainer>\n        );\n\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport DragAndDrop from './draganddrop'\n\nfunction App() {\n  return (\n    <DragAndDrop/>\n   \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}